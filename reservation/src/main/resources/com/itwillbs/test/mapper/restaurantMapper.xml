<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.itwillbs.test.mapper.RestaurantMapper">

    <!-- Reservation 탭의 가게 정보 조회하기 -->
	<select id="selectRestaurantInfo" resultType="com.itwillbs.test.vo.RestaurantVO">
		select * from
			restaurant
				where res_idx = #{res_idx}		
	</select>
	
	<insert id="insertRestaurant">
		INSERT 
			INTO restaurant
			VALUES (
				null -- idx 자동증가
				, #{res_brn}
				, #{res_name}
				, #{res_tel}
				, #{res_address}
				, #{res_detailAddress}
				, CONCAT(#{res_open}, '-' , #{res_close}) -- res_openinghours 문자열 결합 
				, CONCAT(#{res_breakstart}, '-' , #{res_breakend}) -- res_breaktime 문자열 결합 
				, #{res_total_table}
				, #{res_dayoff}
				, #{res_amenity}
				, #{res_amenity_info}
				, #{res_photo1}
				, #{res_photo2}
				, #{res_photo3}
				, #{res_intro}
				
			)
	
	</insert>
	
	<select id="selectReservationList">
			SELECT r.r_idx, me.me_name , r.r_amount, r.r_tables, r.r_personnel, m.m_name, r.r_status, r.r_date, r.r_request, res.res_name
			FROM reservation r JOIN restaurant res
			ON r.res_idx = res.res_idx
			JOIN members m
			ON r.m_idx = m.m_idx
			JOIN menus me
			ON r.me_idx = me.me_idx
			WHERE r.res_idx IN (SELECT res_idx
					FROM restaurant
					WHERE c_idx = (SELECT c_idx
								FROM ceo
								WHERE c_id = #{id}
								)
					)
			ORDER BY r.r_idx;
	</select>
	
	<select id="selectRDList">
		SELECT *
			FROM reservation_detail_info
			WHERE r_idx IN(
				SELECT r_idx
				FROM reservation
				WHERE res_idx IN(SELECT res_idx
						FROM restaurant
						WHERE c_idx = (SELECT c_idx
							FROM ceo
							WHERE c_id = #{sId})
						)
			);
	</select>
	
	
	<select id="selectRestaurantList" resultType="com.itwillbs.test.vo.RestaurantVO">
		SELECT * 
			FROM restaurant
	</select>
	
	
	<update id="updateRestaurant">
		UPDATE restaurant
			SET
				res_brn = #{res_brn}
				, res_name = #{res_name}
				, res_tel = #{res_tel}
				, res_postcode = #{res_postcode}
				, res_address = #{res_address}
				, res_detailAddress = #{res_detailAddress}
				, res_open = #{res_open}
				, res_close = #{res_close}
				, res_breakstart = #{res_breakstart}
				, res_breakend = #{res_breakend}
				, res_holiday = #{res_holiday}
				, res_amenity = #{res_amenity}
				, res_photo = #{res_photo}
				, res_intro = #{res_intro}
					WHERE
						res_brn = #{res_brn}
	</update>	
	
	<!-- 가게별 리뷰 점수 조회 -->
	<select id="selectRestaurantReviewScores" resultType="java.util.Map">
		 SELECT res.res_idx, res.res_name, res_openinghours, res_photo1, res_intro, res_address, res_detailAddress, AVG(rv.rv_scope) AS average_score
			 FROM restaurant res
			 	JOIN reviews rv ON res.res_idx = rv.res_idx
				 GROUP BY res.res_idx, res.res_name, res_openinghours, res_photo1, res_intro, res_address, res_detailAddress;
	</select>
	
		<!-- 가게 조회 -->
	<select id="selectRestaurant" resultType="com.itwillbs.test.vo.RestaurantVO">
		SELECT *
			FROM restaurant
				WHERE res_brn = #{res_brn}
	</select>
	
	<!-- 관리자의 가게 정보 수정 -->
	<update id="adminStoreUpdate" parameterType="com.itwillbs.test.vo.RestaurantVO">
		UPDATE restaurant
			SET res_brn = #{res_brn}
			   ,res_name = #{res_name}
			   ,res_tel = #{res_tel}
			   ,res_address = SUBSTRING_INDEX(#{restaurantAdress}, ',' ,1)
			   ,res_detailAddress = SUBSTRING_INDEX(#{restaurantAdress}, ',' , -1)
			   ,c_idx = #{c_idx}
				WHERE res_idx = #{res_idx}
	</update>
	
	<!-- 관리자의 가게 정보 삭제 -->
	<delete id="deleteRestaurant">
		DELETE FROM restaurant
			WHERE res_idx = #{res_idx}
	</delete>
	
	<!-- 관리자의 가게 조회 -->
	<select id="selectAdminRestaurant" resultType="com.itwillbs.test.vo.RestaurantVO">
		SELECT * 
			FROM restaurant r JOIN ceo c
				ON r.c_idx = c.c_idx
				WHERE r.res_idx = #{res_idx}
	</select>
	
</mapper>
