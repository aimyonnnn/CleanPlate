<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.itwillbs.test.mapper.ReservationMapper">
	
	<!-- Reservation탭의 식당 이름 검색하기 -->
	<select id="selectRestaurantName" resultType="com.itwillbs.test.vo.RestaurantVO">
		select * from
			 restaurant where
			  	res_name like CONCAT('%',#{resName},'%')
	</select>
	
	<!-- 전체 식당 조회 -->
	<select id="selectRestaurantList" resultType="com.itwillbs.test.vo.RestaurantVO">
		select * from
			restaurant
	</select>
	
	<!-- 점주 식당 조회 -->
	<select id="selectOwnerRestaurantList" resultType="com.itwillbs.test.vo.RestaurantVO">
			select * 
			from restaurant
			where c_idx = (select c_idx
						from ceo
						where c_id = #{sId})
	</select>
	<!-- 점주 식당 조회 -->
	
	<!-- 양도 거래 완료 시 예약테이블의 판매자 예약 내역을 구매자로 업데이트 처리 -->
	<update id="updateReservation" parameterType="map">
		  UPDATE reservation
			  SET m_idx = (SELECT m_idx FROM members WHERE m_id = #{sId}),
			      r_status = 4
					 WHERE r_idx = #{r_idx}
	</update>
	<!-- 양도 거래 완료 시 예약테이블의 판매자 예약 내역을 구매자로 업데이트 처리 -->
	
	<select id="selectReviewList" resultType="com.itwillbs.test.vo.ReviewVO">
		SELECT rv_idx, rv_scope, rv_comment, rv_img, res_idx, rv.m_idx, m.m_nick
		FROM reviews rv JOIN members m
		ON rv.m_idx = m.m_idx
		WHERE res_idx = #{res_idx};
	</select>	
	
	<update id="UpdateCancleStatus">
		UPDATE reservation
		SET r_status = #{r_status}
		WHERE r_idx = #{r_idx}
	</update>
	
    <!-- 예약이 많은 순서로 식당의 예약 수 조회 -->
    <select id="selectReservationCountByRestaurant" resultType="java.util.Map">
	    SELECT res_idx, COUNT(*) AS reservation_count
	    	FROM reservation
	   			 GROUP BY res_idx
	    			ORDER BY reservation_count DESC
    </select>
	
		<!-- 예약 목록 조회 -->
	<select id="getReservationList" resultType="com.itwillbs.test.vo.ReservationVO">
		SELECT DISTINCT * 
			FROM reservation r
				JOIN restaurant res JOIN members m
				ON r.res_idx = res.res_idx AND r.m_idx = m.m_idx
	</select>
	
	<!-- 관리자의 예약 정보 조회 -->
	<select id="selectReservation" resultType="com.itwillbs.test.vo.ReservationVO">
		SELECT *
			FROM reservation
				WHERE r_idx = #{r_idx}
	</select>
	
	<!-- 관리자의 예약 정보 수정 -->
	<update id="adminReservationUpdate" >
		UPDATE reservation
			SET r_personnel = #{r_personnel}	
			   ,r_request = #{r_request}
			   ,r_amount = #{r_amount}
			   ,r_status = #{r_status}
				WHERE r_idx = #{r_idx}
	</update>
	
	<!-- 관리자의 예약 정보 삭제 -->
	<delete id="deleteReservation">
		DELETE FROM reservation
			WHERE r_idx = #{r_idx}
	</delete>
	
	<!-- 총 결제 금액 조회 -->
	<select id="getTotalPay" resultType="int"> 
		SELECT SUM(r_amount) AS total
			FROM reservation
	</select>	
	
	<!-- 예약 정보 조회 -->
	<select id="selectReservationInfo" resultType="com.itwillbs.test.vo.ReservationVO">
		select * 
			from reservation
				where r_idx = #{r_idx}
	</select>
	
	<!-- 양도 게시판에 글 등록시 예약상태를 '5-판매중'으로 변경하기 -->
	<update id="updateStatus">
		update reservation
			set
				r_status = 5
			where
				r_idx = #{r_idx}
	</update>
	
	<!-- r_status가 1-방문예정, 2-방문완료, 3-취소, 4-양도완료, 5-판매중, 6-판매실패 -->
	<!-- 프로젝트 실행시 /main으로 들어갈 때마다 예약상태가 1-방문예정이고 날짜가 이전 날짜인 예약의 예약상태를 2-방문완료 처리함 -->
	<update id="updateStatusHome">
			<![CDATA[
				UPDATE reservation
					SET 
						r_status = 2
					WHERE
						r_status = 1
						AND DATE(r_date) < DATE(NOW());
			]]>
	</update>
	
	<!-- r_status가 1-방문예정, 2-방문완료, 3-취소, 4-양도완료, 5-판매중, 6-판매실패 -->
	<!-- 프로젝트 실행시 /main으로 들어갈 때마다 예약상태가 5-판매중이고 날짜가 이전 날짜인 예약의 예약상태를 6-판매실패 처리함 -->
	<update id="updateStatusHome2">
		   <![CDATA[
			 UPDATE reservation
		  		SET 
		  			r_status = 6
		 		WHERE
		 		  	r_status = 5
		  			AND DATE(r_date) < CURDATE();
		    ]]>
	</update>
	
	<!-- 날짜 조회 -->
	<select id="selectedReservation" resultType="String" parameterType="map">
		SELECT r_date
			FROM reservation
			WHERE r_date LIKE '%${r_date}%' AND res_idx = #{res_idx}
	</select>
	
	<!-- 런치에 예약된 테이블 수 조회 -->
	<select id="selectedLunchTables" resultType="int" parameterType="map">
	    SELECT
	    	IFNULL(SUM(CASE WHEN TIME(r_date) 
	    		BETWEEN '11:00' AND '16:59' 
	    		THEN r_tables ELSE 0 END), 0)
	    	FROM reservation
	    	WHERE res_idx = #{res_idx} AND DATE(r_date) = #{r_date} AND r_status = 1
	</select> 
	
	<!-- 디너에 예약된 테이블 수 조회 -->
	<select id="selectedDinnerTables" resultType="int" parameterType="map">
	    SELECT
	    	IFNULL(SUM(CASE WHEN TIME(r_date) 
	    		BETWEEN '17:00' AND '23:00' 
	    		THEN r_tables ELSE 0 END), 0)
	    	FROM reservation
	    	WHERE res_idx = #{res_idx} AND DATE(r_date) = #{r_date} AND r_status = 1
	</select>
	
	<!-- 예약내역 입력 -->
	<insert id="insertReservation" parameterType="map">
		  INSERT 
		  	INTO reservation
		  		 VALUES (
				  	null
				    , #{r_personnel}
				    , #{r_date}
				    , #{r_request}
				    , #{r_amount}
				    , #{r_status}
				    , #{m_idx}
				    , #{res_idx}
				    , #{r_tables}
				    , #{me_idx}
				    , 1
				  )
	</insert>
	
	<!-- 예약번호 조회 -->
	<select id="selectReservationIdx" resultType="int">
		SELECT r_idx
			FROM reservation
			WHERE r_date = #{r_date} 
				AND m_idx = #{m_idx} 
				AND res_idx = #{res_idx}
				ORDER BY r_idx DESC
 				LIMIT 1
	</select>
	
	<select id="selectReservationAllInfo" parameterType="int" resultType="com.itwillbs.test.vo.ReservationVO">
		SELECT *
	        FROM reservation r
	        JOIN members m ON r.m_idx = m.m_idx
	       	JOIN restaurant res ON r.res_idx = res.res_idx
	       	JOIN menus me ON r.me_idx = me.me_idx
	        WHERE r.r_idx = #{r_idx} 
	</select>
	
	<!-- 결제 취소 후 예약상태 변경 -->
	<!-- r_status가 1-방문예정, 2-방문완료, 3-취소, 4-양도완료, 5-판매중, 6-판매실패 -->
	<update id="updateReservationStatus" parameterType="java.util.Map">
	    UPDATE reservation
		    SET
		   		r_status = 3 -- 취소
		    WHERE
		    	r_idx =
		    	(
		    	SELECT r_idx
		        FROM payment
		        WHERE payment_num = #{payment_num}
		    	) -- 결제 취소 시 예약상태 r_status 3-취소로 변경
	</update>
	
	<!-- 예약이 꽉찬 날 조회 -->
	<select id="selectFullDay" resultType="string">
		SELECT DATE_FORMAT(r_date, '%Y-%m-%d')
			FROM reservation
			WHERE r_status = 1
			GROUP BY DATE_FORMAT(r_date, '%Y-%m-%d'), res_idx
			HAVING SUM(r_tables) >= (SELECT res_total_table * 2 
										FROM restaurant 
										WHERE restaurant.res_idx = reservation.res_idx);
	</select>

	<!-- 관리자 페이지 통계용 데이터 조회  -->
	<select id="adminReservationCount">
		SELECT DATE(r_date) AS date,
			   count(r_idx) AS count
			FROM reservation
					WHERE DATE(r_date) = curdate() - interval #{i} day
					GROUP BY date
					ORDER BY date desc
	</select>
</mapper>